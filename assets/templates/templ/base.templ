package templates

import (
	"fmt"
	"time"
)

type PageData struct {
	Version string
}

templ Base(title string, data PageData, meta templ.Component, content templ.Component, scripts ...templ.Component) {
	<!DOCTYPE html>
	<html
		lang="en"
		x-data="{
		darkMode: localStorage.getItem('theme') === 'dark' || (!localStorage.getItem('theme') && window.matchMedia('(prefers-color-scheme: dark)').matches),
		toggleTheme() {
			this.darkMode = !this.darkMode;
			localStorage.setItem('theme', this.darkMode ? 'dark' : 'light');
		}
	}"
		x-bind:class="{ 'dark': darkMode }"
	>
		<head>
			<meta charset="utf-8"/>
			<title>{ title }</title>
			<meta name="viewport" content="width=device-width, initial-scale=1"/>
			if meta != nil {
				@meta
			}
			<link rel="stylesheet" href={ fmt.Sprintf("/static/css/main.css?version=%s", data.Version) }/>
		</head>
		<body class="min-h-screen bg-background text-foreground">
			<header class="border-b bg-background/95 backdrop-blur supports-[backdrop-filter]:bg-background/60">
				<div class="container mx-auto flex h-14 items-center justify-between px-4">
					<div class="flex items-center">
						<h1 class="mr-6 text-lg font-semibold">
							<a href="/" class="hover:text-primary transition-colors">MyCV.Quest</a>
						</h1>
						@Nav()
					</div>
					<button
						@click="toggleTheme()"
						class="p-2 rounded-md hover:bg-accent transition-colors"
						:title="darkMode ? 'Switch to light mode' : 'Switch to dark mode'"
					>
						<svg x-show="!darkMode" class="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
							<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M20.354 15.354A9 9 0 018.646 3.646 9.003 9.003 0 0012 21a9.003 9.003 0 008.354-5.646z"></path>
						</svg>
						<svg x-show="darkMode" class="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
							<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 3v1m0 16v1m9-9h-1M4 12H3m15.364 6.364l-.707-.707M6.343 6.343l-.707-.707m12.728 0l-.707.707M6.343 17.657l-.707.707M16 12a4 4 0 11-8 0 4 4 0 018 0z"></path>
						</svg>
					</button>
				</div>
			</header>
			<main class="flex-1">
				@content
			</main>
			@Footer(data)
			if len(scripts) > 0 {
				for _, script := range scripts {
					@script
				}
			}
			<script defer src="https://cdn.jsdelivr.net/npm/alpinejs@3.x.x/dist/cdn.min.js"></script>
		</body>
	</html>
}

templ Nav() {
	<nav class="flex items-center space-x-6 text-sm font-medium">
		<a href="/" class="transition-colors hover:text-foreground/80 text-foreground/60">Home</a>
		<a href="/cv-builder" class="transition-colors hover:text-foreground/80 text-foreground/60">CV Builder</a>
		<a href="/templates" class="transition-colors hover:text-foreground/80 text-foreground/60">Templates</a>
		<a href="/api/cv/templates" class="transition-colors hover:text-foreground/80 text-foreground/60">API</a>
	</nav>
}

templ Footer(data PageData) {
	<footer class="border-t py-6 md:py-0">
		<div class="container mx-auto flex flex-col items-center justify-between gap-4 md:h-24 md:flex-row px-4">
			<div class="text-center text-sm leading-loose text-muted-foreground md:text-left">
				&copy; { fmt.Sprintf("%d", time.Now().Year()) } MyCV.Quest. Built with Go and templ.
			</div>
			<div class="text-center text-sm text-muted-foreground md:text-right">
				Version: { data.Version }
			</div>
		</div>
	</footer>
}
